---
title: "<span style ='font-size:40px; font-weight:bold;'>Práctica 1. Introducción a R y R Studio</span>" 

author: "Jesús Martín Fernández"
format: 
  pdf:
       toc: true
       toc-title: "Contenidos"
       toc-location: left
editor: visual
---



## 1. ¿Qué es R y cómo funciona R?

R es un lenguaje de programación y un entorno de software diseñado especialmente para el análisis estadístico y la manipulación de datos. A diferencia de otros lenguajes de programación que necesitan ser compilados en un archivo ejecutable antes de su uso, R es un lenguaje interpretado. Esto significa que puedes escribir y ejecutar comandos de forma interactiva, lo que te permite ver los resultados de inmediato sin necesidad de un proceso de compilación previo. Esta característica hace que R sea especialmente útil para tareas exploratorias y análisis rápidos.

### 1.1 Un poco de historia

La historia de R comienza en 1992, cuando Robert Gentleman y Ross Ihaka, del Departamento de Estadística de la Universidad de Auckland en Nueva Zelanda, empezaron a desarrollar el lenguaje. Sin embargo, si se rastrea más atrás, se descubre que R tiene sus raíces en el lenguaje S, desarrollado por John Chambers y su equipo en los Laboratorios Bell (ahora Alcatel-Lucent) en Nueva Jersey desde finales de los años 70. El lenguaje S fue diseñado para el análisis de datos y sentó las bases para muchas herramientas estadísticas posteriores.

R se creó combinando las fortalezas de dos lenguajes existentes: S y Scheme. Según los propios diseñadores, "el lenguaje resultante es muy similar en apariencia a S, pero en el uso de fondo y la semántica, es derivado de Scheme". El nombre "R" fue elegido en parte para reconocer la influencia de S y en parte para destacar sus propias innovaciones.

La primera versión de R, la 0.16, fue una versión alfa desarrollada por Ihaka y Gentleman y presentó muchas de las características descritas en el "White Book". En 1997, se lanzó la versión 0.49, la versión más antigua cuyo código se conserva y que aún compila en algunas plataformas UNIX. Este año también marcó el inicio del CRAN (Comprehensive R Archive Network) con tres espejos y doce paquetes. En diciembre de 1997, R se convirtió en parte del Proyecto GNU, una iniciativa para desarrollar software libre. Como parte de esta integración, el código fuente de R empezó a gestionarse y controlarse mediante CVS (Concurrent Versions System), una herramienta para el manejo de versiones de software. Esto permitió un control más organizado y colaborativo sobre el desarrollo y las actualizaciones del código de R.

A lo largo de los años, R ha evolucionado significativamente. La versión 1.0.0, lanzada el 29 de febrero de 2000, fue la primera versión considerada suficientemente estable para su uso en producción. En versiones posteriores, se introdujeron importantes mejoras como los métodos S4 en la versión 1.4.0, el soporte para UTF-8 en la versión 2.1.0, y el "lazy loading" para una carga rápida de datos en la versión 2.0.0. En 2004, Insightful Corporation adquirió S y agregó un entorno gráfico, y en 2008, TIBCO compró Insightful.

La evolución de R continuó con mejoras constantes en el rendimiento y la funcionalidad, incluyendo soporte para sistemas Windows de 64 bits en la versión 2.11.0 y mejoras en la internacionalización y la velocidad de serialización en versiones posteriores. La versión 3.0.0, lanzada en abril de 2013, introdujo mejoras en la interfaz gráfica de usuario, funciones gráficas, gestión de memoria y rendimiento. La versión 3.4.0, lanzada en abril de 2017, habilitó el compilador JIT ("Just In Time") en el nivel 3 de forma predeterminada, marcando un hito importante en la optimización del rendimiento.

Hoy en día, R sigue siendo desarrollado y mantenido por el R Development Core Team, y es una herramienta esencial en el análisis estadístico y la visualización de datos, con una comunidad activa que contribuye a su constante evolución. Para conocer más sobre los autores y desarrolladores actuales de R, se puede consultar la lista de contribuyentes usando el comando `contributors();` en el entorno de R..

Pero además de sus creadores existe una "comunidad" alrededor de R que juega un papel crucial en el éxito y la expansión del lenguaje de programación R. Su importancia radica no solo en la cantidad de usuarios que confían en R para sus análisis estadísticos y científicos, sino también en la vibrante red de colaboración y soporte que impulsa continuamente la evolución del lenguaje. La participación activa de sus miembros ha sido clave para el desarrollo de una vasta cantidad de recursos, herramientas y conocimientos compartidos que enriquecen el ecosistema R.

[La Comunidad R]{.underline}

La comunidad global de R no solo está formada por usuarios, sino también por contribuyentes que desarrollan paquetes para la biblioteca CRAN y brindan apoyo en foros y plataformas. Es conocida por su dinamismo y compromiso, donde sus miembros gestionan foros, escriben blogs especializados y responden preguntas en Stack Overflow, creando una sólida red de soporte.

Además, la comunidad organiza conferencias sobre R en todo el mundo, ofreciendo oportunidades para aprender, compartir conocimientos y conectar con otros profesionales y entusiastas.

Si estás comenzando con R, seguramente encontrarás un paquete que se ajuste a tus necesidades. La comunidad ha desarrollado miles de herramientas que amplían las capacidades de R, con CRAN albergando casi 20.000 paquetes.

### 1.2 Cómo funciona R

R trabaja con objetos (variables, datos, funciones, resultados) que se almacenan en la memoria activa y se manipulan mediante operadores y funciones. Los resultados también son objetos que pueden analizarse. Los archivos solo se usan para entrada y salida de datos, mientras que las funciones se organizan en paquetes, con el paquete base como núcleo para tareas clave de manipulación de datos y análisis estadístico. Los operadores en R son intuitivos, y las funciones, que también son objetos, permiten realizar análisis complejos. La sintaxis accesible y su estructura orientada a objetos hacen de R una herramienta eficaz para el análisis de datos.

A diferencia de los programas tradicionales que muestran inmediatamente los resultados, R almacena los resultados como objetos, lo que permite al usuario trabajar con ellos más tarde. Por ejemplo, si estás analizando una gran base de datos y realizas una decena de modelos explicativos de los cuáles solo quieres elegir uno, R guarda el objeto que contiene toda la información de cada modelo. En lugar de mostrar todos los detalles de cada uno de ellos inmediatamente, puedes extraer solo la bondad de ajuste o los coeficientes de cada modelo, sin tener que lidiar con una salida masiva de información. Esto hace que R sea más flexible y eficiente en el manejo de datos complejos.

![](images/clipboard-988688670.png)

Esquema del funcionamiento de R (tomado de Paradis, E. (2005). *R for Beginners*. Institut des Sciences de l'Evolution. Université Montpellier II.)

Otra de las ventajas de R es su sintaxis sencilla, que permite a los usuarios realizar operaciones y análisis complejos de manera intuitiva. A diferencia de otros lenguajes de programación que requieren estructuras más elaboradas, R utiliza comandos directos que facilitan el trabajo desde el principio, lo que permite a los usuarios centrarse en el análisis sin preocuparse demasiado por la complejidad técnica.

Otro aspecto importante es la consistencia en el uso de las funciones: todas las funciones en R deben incluir paréntesis, lo que crea una estructura clara y predecible. Esta característica asegura que los usuarios sepan exactamente cómo interactuar con cada función, independientemente de si reciben o no argumentos. Si se omiten los paréntesis, en lugar de ejecutar la función, R muestra su definición interna, lo que permite a los usuarios ver y entender cómo está diseñada.

Este enfoque estructurado y accesible de R fomenta tanto el aprendizaje rápido como la exploración más profunda del código. Los usuarios pueden comenzar realizando operaciones básicas, pero también tienen la libertad de explorar cómo se construyen las funciones y modificarlas si es necesario, lo que convierte a R en una herramienta altamente flexible para el análisis de datos.

## 2. Comenzando a trabajar con R

### 2.1 Instalación de R

Para instalar R vamos a la página web de R project: [**http://www.r-project.org**](http://www.r-project.org/)**.**

![](Imagenes/CRAN_2.jpeg)

Después seleccionamos el "espejo" más conveniente, en nuestro país una opción adecuada está en la Red Iris The Comprehensive R Archive Network (rediris.es) <https://cran.rediris.es/>. Allí nos descargaremos el formato conveniente en función del sistema operativo.

En el entorno de la URJC lo tenemos operativo en MyApps <https://myapps.urjc.es/myapps/Apps>

Al instalar R, el **paquete base** se incluye automáticamente. Este paquete proporciona herramientas esenciales para manipular datos, realizar cálculos estadísticos y crear gráficos. No es necesario instalarlo por separado, ya que está disponible desde el inicio para que puedas empezar a trabajar con R de inmediato.

### 2.2 RStudio: una interfaz para usar R

Aunque puedes ejecutar R directamente desde la línea de comandos, **RStudio** es una interfaz gráfica que facilita el uso de R, especialmente para principiantes.

RStudio se descarga desde su página oficial <https://www.rstudio.com/>

Pero también puedes encontrarla en MyApps

Esta es la apariencia de RStudio

![](Imagenes/Rstudio_consola.png)

En RStudio, la **consola** se encuentra por defecto en el panel inferior izquierdo, en la pestaña etiquetada como Console. Aquí es donde interactuamos directamente con R. Debajo de esta pestaña, verás un texto introductorio seguido del símbolo "\>", que indica que R está listo para recibir instrucciones. En esta consola puedes escribir comandos o código, y al pulsar Enter, R ejecutará el comando y mostrará el resultado inmediatamente en la misma consola. Es el lugar principal para ejecutar scripts de manera interactiva y ver resultados en tiempo real.

Escribe esta operación en la consola y mira el resultado



```{r}
3+2

```



También pueden introducirse órdenes diversas en la consola en líneas sucesivas o separadas por el símbolo `;`



```{r}
3+2
2*(4-1)^2
log10 (100)
sqrt(36)
```

```{r}
3+2 ; 2*(4-1)^2 ; log10 (100) ;sqrt(36)

```



En RStudio, el panel de **script** se encuentra en la parte superior izquierda, permitiendo escribir y ejecutar instrucciones línea por línea o en bloque, igual que en la Consola. Para ejecutar el código, puedes optar por varias alternativas: hacer clic en el botón **Run** en la parte derecha del panel de script, o puedes usar el atajo **Ctrl+Enter.**

Los contenidos del panel script pueden guardarse usando **File \> Save as..** y seleccionar la ruta deseada, o haciendo clic en el botón **Guardar** en la cinta de opciones del script.

El panel de **Entorno** en RStudio está dividido en dos pestañas principales: **Environment** y **History** (otra denominada Connection no la explicaremos de momento)

En la pestaña **Environment**, se muestran todos los objetos (como variables, data frames, y otros elementos) que has creado durante tu sesión de trabajo. Aquí también puedes gestionar tu sesión de trabajo mediante opciones como cargar y guardar el estado actual, importar datos y limpiar los objetos de la sesión. Estas funciones son accesibles a través de la cinta de opciones situada en esta pestaña, facilitando la administración de tus datos y objetos.

La pestaña **History** registra todas las instrucciones que has ejecutado. Además de mostrar un historial completo de los comandos utilizados, te permite gestionar este historial de manera eficiente. Puedes cargar y guardar el historial de comandos, seleccionar uno o varios comandos y enviarlos a la consola o al script para su re-ejecución. También puedes limpiar el historial cuando ya no lo necesites. Esta pestaña es útil para revisar y reutilizar comandos anteriores, lo que facilita el trabajo continuo y la replicación de análisis.

El panel habitualmente situado en el cuadrante inferior derecho contiene, a su vez, varias pestañas.

Entre las pestañas destacadas se encuentran:

-   **Files**: Actúa como un explorador de archivos, permitiendo la navegación y gestión de los archivos en el sistema.

-   **Plots**: Muestra los gráficos generados durante la sesión. En esta pestaña, se pueden utilizar opciones como **Zoom** para ampliar los gráficos en una ventana separada, y **Export** para guardar los gráficos en formatos de imagen, PDF, o copiarlos al portapapeles.

-   **Packages**: Ofrece un listado de los paquetes instalados en R y aquellos que están cargados en la sesión actual. Desde esta pestaña, se pueden instalar nuevos paquetes, así como actualizar los ya existentes.

-   **Help**: Proporciona asistencia sobre funciones específicas, facilitando la consulta de documentación y ayuda relacionada con el uso de diversas funciones en R.

### 2.3 Establecer el directorio de trabajo

Antes de empezar a trabajar en R, debes fijar el directorio donde se guardarán tus archivos. Hay dos maneras de hacerlo:

1.  **Fijar el directorio manualmente**: Usa la función `setwd("C:/ruta del directorio de trabajo")` para establecer la ruta de trabajo. Para verificar la ruta actual, usa `getwd()`, y para listar los archivos en el directorio, utiliza `dir()`.

2.  **Crear un proyecto de R**: Selecciona **File \> New Project...** para vincular todos los archivos al proyecto. Puedes crear un nuevo directorio con un proyecto vacío o elegir una carpeta existente. Al crear el proyecto, se genera un archivo `.Rproj`, y todos los archivos asociados se guardarán en la carpeta del proyecto. Para abrir un proyecto, haz doble clic en el archivo `.Rproj` o selecciona **File \> Open Project...** en RStudio.

Los proyectos facilitan la organización, ya que todos los archivos creados se guardan automáticamente en la carpeta del proyecto.

Es importante como se debe indicar la ruta de cualquier archivo en R. En la navegación de archivos y rutas en sistemas operativos, el uso de barras invertidas (`\`) y barras normales (`/`) tiene diferentes significados según el entorno.

Cuando se trabaja en **R** y **RStudio**, se debe tener en cuenta que **R** utiliza barras normales (`/`) en las rutas de archivos . Sin embargo, si estás escribiendo rutas en **Windows** y usas barras invertidas (`\`), (como hace Windows habitualmente) recuerda que en **R** se debe duplicar cada barra invertida para que se interprete correctamente, es decir, podras escibir

`C:/Users/Usuario/Documents/Archivo.txt`. o

`C:\\Users\\Usuario\\Documents\\Archivo.txt`.

### 2.4 Instalación y uso de paquetes

### 2.5 La ayuda en R

## 3. Creación de objetos con R

