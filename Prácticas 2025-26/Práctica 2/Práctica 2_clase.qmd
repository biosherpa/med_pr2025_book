rm(list = ls())

Un vector es una secuencia ordenada de datos del mismo tipo (siendo éstos númericos, cadenas, fechas, etc). Es la estructura de datos más sencilla. Un simple valor (por ejemplo el número 5) constituye un vector numérico. Los escalares son vectores de longitud 1

```{r}
x<- 5
x
```

Pero un vector puede contener otro tipo de datos como cadenas de texto o datos lógicos

```{r}
x<- as.vector (TRUE)
x
y<-as.vector(c("Andrés", "Luis"))
y

```



Se crea con la función c(), que significa ‘concatenar’ o ‘combinar’ y el paréntesis debe incluir r los datos que deseamos integrar en ese vector, separados por comas (y en caso de datos de tipo `charater` flanqueados por comillas).



```{r}
x <- c(1,2,3,4,5,6,7,8,9,10)
x

```


Con expresiones específicas

```{r}
x <- 1:10
x
```

El operador `:` tiene prioridad

```{r}
x <- 1:10-2 
x
```

Se pueden cambiar las prioridades usando paréntesis

```{r}
x <- 1:(10-2) 
x
```

Se puede crear secuencias de números enteros con `sequence`

```{r}
x<-sequence(4:5) 
x
```

La función `seq` es una función más general y flexible .

```{r}
x<- seq(1, 2, by= 0.1)

x


y<- seq(length=9, from=1, to=5)

y
```

Otra forma de crear un vector con elementos repetidos es con `rep`

```{r}
x <-rep(1, 10) 
x
```

Se pueden generar secuencias con distribuciones fijas, por ejemplo la normal con la función `rnorm`

```{r}
x<-rnorm(10, 50, 5)  
x 
```

Se puede crear un vector con elementos repetidos en forma de series con la función `gl` (generate levels)

```{r}
x<-gl(3, 4)  
x 
```


Vector formado por caracteres:

Cada uno de los elementos de un vector de caracteres debe escribirse entre comillas. En caso contrario, la máquina devuelve un mensaje de error.

```{r}
ciudades<- c("Jaen", "Córdoba", "Sevilla")
ciudades
```

Vector lógico:

Solo requiere definir los valores verdaderos (`TRUE`) y falsos (`FALSE`):

```{r}
vector_logico <- c(TRUE, FALSE, TRUE, FALSE)
print(vector_logico)

```

Los vectores lógicos se pueden crear al poner una condición a otro vector:

```{r}
# Crear un vector numérico
numeros <- c(1, -5, 7, -2, 8, 9, 2)

# Crear un vector lógico que indica si cada elemento es positivo o no
positivo <- numeros>0
print(positivo)

```


Operaciones con vectores


```{r}
v0 <- 10
v0

is.vector(v0) 
```



Vamos a operar con el vector `v1(2,5,10)`

```{r}
v1<-c(2,5,10)
v1
```

Se pueden añadir elementos a un vector

```{r}
v2<-c (v1,8)
v2
```

Ahora tenemos dos vectores `v1(2,5,10) , v2(2,5,10,8)`

Se pueden realizar operaciones aritméticas con vectores. Se pueden sumar `v1` y `v2`

```{r}
v1+v2


```


También pueden multiplicarse `v1` y `v2`

```{r}
v1*v2

```



Se pueden elevar al cuadrado los términos de un vector

```{r}
v1^2 
```

Le podemos pedir a R que nos calcule la raiz cuadrada de los elementos de un vector con la función `sqrt`,

```{r}
sqrt (v2) #v2(2,5,10,8)

```

Se pueden sumar los términos de un vector, con la función ´sum´

```{r}
sum (v2) #v2(2,5,10,8) 
```

Se puede calcular la media de los términos de un vector con la función ´mean´

```{r}
mean (v2) #v2(2,5,10,8)
```

Atención, si un vector tiene valores ausentes `NA` hay que hacérselo notar a la función. Imaginemos `v3(0,10,8,NA,6)`

```{r}
v3<-c(0,10,8,NA,6)
mean (v3)
```

la forma correcta de calcular la media sería

```{r}
mean(v3, na.rm = TRUE)
```

Existen otras funciones que operan con los valores de un vector

```{r}
v3<-c(0,10,8,NA,6)
length(v3) 
max(v3,na.rm = TRUE) 
min(v3, na.rm = TRUE) 
```

Se puede operar con un solo vector

```{r}

v2*2+10
```

Cuando le indicamos a R que calcule `v2* 2 + 10`, lo que realmente está calculando es:`v2 * c(2, 2, 2, 2) + c(10, 10, 10, 10)`

Algunas operaciones se pueden escribir de forma simplificada

```{r}
v2 + c (2, 10)
```

Esta operación suma 2 a los valores impares y 10 a los pares. Recuerde que `v2(2,5,10,8)`


Los elementos de un vector se pueden recuperar, por medio de corchetes. Siendo `v1(2,5,10) v2(2,5,10,8)`

```{r}
v1[2]
v2[3]
```


Se puede operar con valores de determinada posición de los vectores, vamos a sumar el valor de la segunda posición de `v1` con el de la tercera posición de `v2`

```{r}
v1[2] +v2[3]
```

También se pueden añadir los corchetes para añadir un valor en una posición o para cambiarlo. Veamos `v1(2,5,10)`

```{r}
v1[4] <- 12
v1
v1[2] <- 12
v1

```

Los elementos de un vector se pueden recuperar en función de una orden lógica. Siendo `v1(2,12,10,12)`

```{r}
v1 > 7
v1 < 7
v1 == 12
```

También puede usarse la función `which`. Tenemos `v3(0,10,8,NA,6)`

```{r}
which(v3 > 2) 
which(v3 < 2 | v3 >= 8) 
```

Atención, hay un elemento NA, aunque R en esta versión lo identifica como tal, es más recomendable

```{r}
which(!is.na(v3) & v3 < 2 | v3 >= 8) 
```

Posiciones de los elementos \>2 y \<= 8 sabiendo que existen valores ausentes.

Matrices

En R, una matriz es una colección bidimensional de elementos que deben ser del mismo tipo (numérico, carácter, lógico, etc.).


La función `matrix()` es la forma más común de crear matrices en R.

```{r}
matrix(1:12, nrow = 4, ncol = 3)
```

Cuando no se especifica nada la matriz se cumplimenta por columnas.

Pero se puede pedir que se cumplimente por filas

```{r}
matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)
```

La función `matrix()` se puede sustituir con la instrucción `dim`, que transforma un vector en una matriz

```{r}
x<-1:15
dim(x) <- c(5, 3)
x
```

### 4.2 Operaciones con matrices

Las funciones básicas explicadas se pueden emplear en una matriz

```{r}
range(x) #Rango de la matriz x
length(x) #Número de elementos en la matriz x
mean(x) #Media de los valores de la matriz x
median(x) #Mediana de los valores de la matriz x
sum(x) #Suma de los valores de la matriz x
prod(x) #Producto de los valores de la matriz x
max(x) #Valor máximo de la matriz x
min(x) #Valor mínímo de la matriz x
which.max(x) # Devuelve el valor máximo de la matriz x
which.min(x) #Devuelve valor mínimo de la matriz x

```

Las matrices pueden unirse entre sí

```{r}
m1<-matrix(1:4, nrow=2, ncol=2)
m2<-matrix(5:8, nrow=2, ncol=2)
m1
m2
```

Se pueden unir por filas con la orden `rbind`

```{r}
rbind (m1,m2)
```

Y se puden unir por columnas con la orden `cbind`

```{r}
cbind (m1,m2)
```

´Las matrices también se pueden sumar o multiplicar

```{r}
m1+m2
m1*m2
```

Las matrices se pueden transponer con la orden `t`

```{r}
t (m1)
t (m2)
```

Las filas y las columnas de las matrices pueden etiquetarse

```{r}
colnames(m1) <- c("Columna 1", "Columna 2")
rownames (m1) <- c("Fila 1", "Fila 2")
m1

```

Las posiciones de los valores de una matriz pueden recuperarse, supongamos una nueva matriz `m3`

```{r}
m3<- rbind(m1,m2)
rownames (m3) <- c("Fila 1", "Fila 2", "Fila 3", "Fila 4")
m3

```

Vamos a intentar localizar algunas posiciones en la matriz

```{r}
m3[1,] # fila 1 todas las columnas.
m3[,2] # todas filas, columna 2
m3[1:2,1] #filas 1 y 2,  columna 1 
m3[-(1:2),2] #excluir filas 1 a 2, incluir columna 2.
m3[,"Columna 2"] #La columna 2, usando el nombre de la columna
m3[3,c("Columna 1","Columna 2")] # La fila 3 y todas las columnas, llamadas por su nombre

```

Ejercicios con vectores

Crea un vector v1 en el que se repita la secuencia 1, 2, 3, 4, 5 dos veces. Luego, encuentra la suma, la media y la desviación estándar de los valores en el vector.

Este es el código que se puede usar (piensa que puede haber otras alternativas, si el resultado es el mismo, serán válidas)

```{r, eval=FALSE}
v1 <- rep(c(1, 2, 3), times = 5)

# Mostrar el vector
print(v1)


# Calcular la suma
sum_v1
print(sum_v1)
# Imprime: 45

# Calcular la media
media_v1 <- mean(v1)
print(media_v1)
# Imprime: 2.5

# Calcular la desviación estándar
sd_v1 <- sd(sd_v1)
print(sd_v1)
# Imprime: 0.8164966
```

Encuentra el valor de la suma de los primeros 100 números naturales

```{r, eval=FALSE}
# Crear el vector con números naturales del 1 al 100
v100 <- 1:100

# Mostrar el vector (no es necesario)
print(v100)

# Calcular la suma de los valores del vector
suma_v100 <- sum(v100)
print(suma_v100)
# Imprime: 5050

```

Crea dos vectores de la misma longitud, `vector_a (1,2,3,4,5)` y `vector_b (5,4,3,2,1)`. Realiza las siguientes operaciones: Suma elemento a elemento, resta elemento a elemento, multiplicación elemento a elemento y divide elemento a elemento.

```{r, eval=FALSE}

# Crear los vectores
vector_a <- c(1, 2, 3, 4, 5)
vector_b <- c(5, 4, 3, 2, 1)

# Suma elemento a elemento
suma_elemento <- vector_a + vector_b
print(suma_elemento)  # Imprime: 6 6 6 6 6

# Resta elemento a elemento
resta_elemento <- vector_a - vector_b
print(resta_elemento)  # Imprime: -4 -2 0 2 4

# Multiplicación elemento a elemento
multiplicacion_elemento <- vector_a * vector_b
print(multiplicacion_elemento)  # Imprime: 5 8 9 8 5

# División elemento a elemento
division_elemento <- vector_a / vector_b
print(division_elemento)  # Imprime: 0.2 0.5 1 2 5
```

Crea un vector `v3` con los números del 1 al 15. Luego extrae los elementos en las posiciones 3, 5 y 7, y después extrae todos los elementos que sean mayores a 10.

```{r, eval=FALSE}
# Crear el vector
v3 <- 1:15

# Extraer elementos en posiciones 3, 5 y 7
el_selecc <- v3[c(3, 5, 7)]
print(el_selec)  # Imprime: 3 5 7

# Extraer todos los elementos mayores a 10
mayores10 <- v3[v3 > 10]
print(mayores10)  # Imprime: 11 12 13 14 15

```

Crea un vector lógico `vlog (TRUE, FALSE, TRUE, TRUE, FALSE)` . Realiza las siguientes operaciones: calcula la cantidad de `TRUE` en el vector, verifica si todos los valores en el vector son `TRUE`, verifica si al menos uno de los valores en el vector es `TRUE`.

```{r, eval=FALSE}
# Crear el vector
vlog <- c(TRUE, FALSE, TRUE, TRUE, FALSE)

# Contar la cantidad de TRUE
cantidad_true <- sum(vlog)
print(cantidad_true)  # Imprime: 3

# Verificar si todos los valores son TRUE
todos_true <- all(vlog)
print(todos_true)  # Imprime: FALSE

# Verificar si al menos uno es TRUE
al_menos_un_true <- any(vlog)
print(al_menos_un_true)  # Imprime: TRUE

```

Vamos a crear un vector de 10 números aleatorios `v_aleat` y encuentra el valor máximo y mínimo. Después ordena el vector de menor a mayor. Ten en cuenta que los resultados pueden ser diferentes cada vez que ejecutes el código

```{r, eval=FALSE}

# Crear un vector con 10 números aleatorios
v_aleat <- sample(1:100, 10)

# Mostrar el vector
print(v_aleat)
# Ejemplo de salida: 55  7  2  80 35 19 74  6 48 63

# Encontrar el valor máximo
maximo <- max(v_aleat)
print(maximo)
# Ejemplo de salida: 80

# Encontrar el valor mínimo
minimo <- min(v_aleat)
print(minimo)
# Ejemplo de salida: 2

# Ordenar el vector de menor a mayor
v_ordenado <- sort(v_aleat)
print(v_ordenado)
# Ejemplo de salida: 2  6  7 19 35 48 55 63 74 80
```

Ejercicios con matrices

Crea una matriz `m1` de dimensiones 5x5 con los números del 1 al 25 creados por filas

```{r, eval=FALSE}
# Crear una matriz de 5 filas y 5 columnas con números del 1 al 25 por filas
m1 <- matrix(1:25, nrow = 5, ncol = 5, byrow = TRUE)

# Mostrar la matriz
print(m1)
# Imprime:
#      [,1] [,2] [,3] [,4] [,5]
# [1,]    1    2    3    4    5
# [2,]    6    7    8    9   10
# [3,]   11   12   13   14   15
# [4,]   16   17   18   19   20
# [5,]   21   22   23   24   25
```

Usa la matriz `m1` creada anteriormente. Accede al elemento en la tercera fila y cuarta columna. También, extrae la segunda fila completa y la cuarta columna completa.

```{r, eval=FALSE}
# Acceder al elemento en la tercera fila y cuarta columna
elemento <- m1[3, 4]
print(elemento)
# Imprime: 14

# Extraer la segunda fila completa
fila2 <- m1[2, ]
print(fila2)
# Imprime: 6 7 8 9 10

# Extraer la cuarta columna completa
columna4 <- m1[ , 4]
print(columna4)
# Imprime: 4 9 14 19 24

```

Usa la matriz `m1` y realiza las siguientes operaciones: suma todos los elementos de la matriz, encuentra la media de los elementos de la matriz, multiplica cada elemento de la matriz por 3.

```{r, eval=FALSE}
# Sumar todos los elementos de la matriz
suma_m1 <- sum(m1)
print(suma_m1)
# Imprime: 325

# Encontrar la media de los elementos de la matriz
media_m1 <- mean(m1)
print(media_m1)
# Imprime: 13

# Multiplicar cada elemento de la matriz por 3
m1_multiplicada <- m1 * 3
print(m1_multiplicada)
# Imprime:
#      [,1] [,2] [,3] [,4] [,5]
# [1,]    3    6    9   12   15
# [2,]   18   21   24   27   30
# [3,]   33   36   39   42   45
# [4,]   48   51   54   57   60
# [5,]   63   66   69   72   75
```

Traspón la matriz `m1` y después sustituye el valor en la primera fila y primera columna a 100 y el valor en la tercera fila y quinta columna a 200.

```{r, eval=FALSE}
# Transponer la matriz
m1_transpuesta <- t(m1)

# Mostrar la matriz transpuesta
print("Matriz transpuesta:")
print(m1_transpuesta)
# Imprime:
#      [,1] [,2] [,3] [,4] [,5]
# [1,]    1    6   11   16   21
# [2,]    2    7   12   17   22
# [3,]    3    8   13   18   23
# [4,]    4    9   14   19   24
# [5,]    5   10   15   20   25

# Cambiar el valor en la primera fila y primera columna a 100
m1_transpuesta[1, 1] <- 100

# Cambiar el valor en la tercera fila y quinta columna a 200
m1_transpuesta[3, 5] <- 200

# Mostrar la matriz transpuesta modificada
print("Matriz transpuesta modificada:")
print(m1_transpuesta)
# Imprime:
#      [,1] [,2] [,3] [,4] [,5]
# [1,]  100    6   11   16   21
# [2,]    2    7   12   17   22
# [3,]    3    8   13   18  200
# [4,]    4    9   14   19   24
# [5,]    5   10   15   20   25

```

Añade a `m1` una fila con los valores 26, 27, 28 , 29 y 30.

```{r, eval=FALSE}
fila6 <- c(26, 27, 28, 29, 30)
m1_mod <- rbind(m1, fila6)

# Mostrar la matriz con la nueva fila añadida

print(m1_mod)
# Imprime:
#      [,1] [,2] [,3] [,4] [,5]
# [1,]    1    2    3    4    5
# [2,]    6    7    8    9   10
# [3,]   11   12   13   14   15
# [4,]   16   17   18   19   20
# [5,]   21   22   23   24   25
# [6,]   26   27   28   29   30


```

