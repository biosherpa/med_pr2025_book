---
title: "PR2-Importación de datos."
author: "Jesús Esteban Hernández"
date: "2/12/2022"
output:
  html_document: 
    theme: cosmo
    code_folding: show
    toc: yes
    number_sections: yes
    toc_depth: 5
    toc_float: yes
    
  # html_notebook:
  #   # theme: readable
  #   code_folding: show
  #   toc: true
  #   toc_float: 
  #     collapsed: false
  #   toc_depth: 5
  #   # toc-title: Table of contents #toc-title no me funciona.
  #   number_sections: yes
  # Opciones aquí https://garrettgman.github.io/rmarkdown/html_document_format
  pdf_document:
    toc: yes
    toc_depth: 5
    latex_engine: lualatex
lan: es-ES
editor_options:
bibliography: MasterUE.bib
biblio-style: apalike
link-citations: true
#csl: biomed-central.csl
chunk_output_type: inline
---

```{css label=css, echo = FALSE}
<style type="text/css">
  
  .TOC {
    left:0;
    width:200px;
    margin-left: 0px;
    right: 2px;
    margin: 2px 20px 20px 0px;
    color: red;
    font-size: 2px;
  }

  .main-container {
  
  width:1800px !important;
  margin-left: 10px;
  margin-right: 10px;
  
}

body {
  font-size: 14pt;
  font-family: Helvetica;
  <!-- color: red; -->
  <!-- background-color: olive; -->
  
}

h1 {
  font-size: 34px;
}

h2 {
  font-size: 20px;
  color: red;
  text-indent:10px;

}

h3 {
  font-size: 20px;
  color: blue;
  text-indent:15px;

}


h4 {
  font-size: 20px;
  color: green;
  text-indent:20px;

}

tocify-header {
    text-indent: initial;
}

.gt_table {
  margin-left: 10px !important;
  margin-right: 10px !important;
  width: auto !important;
  
}


</style>

```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
```


Recuerda siempre cómo *"piensa"* R.

![Cómo piensa R](pics/como_piensa_R.png){width="75%"}

# Importación de datos en R.

En la sección anterior hemos visto lo fundamental sobre estructuras y hemos comentado las características de una estructura clave en el manejo de datos en R: **dataframe**.

En esta práctica vamos a ver cómo importar datos utilizando diferentes funciones dependiendo del origen.

Como comentábamos, la importación consiste en construir un objeto, generalmente de tipo dataframe a partir de un archivo externo.

Para hacerlo necesitamos que el archivo externo tenga una estructura matricial (.xlsx) o que pueda convertirse en matricial (.csv) porque incluya caracteres de separación que le indiquen al programa que lo importa, en nuestro caso R, cuando cambiamos de columna o de fila.

Se han incorporado muchas funciones a R que realizan la importación de forma casi automática, pero entender sus fundamentos puede ayudar a entender y resolver problemas de importación.

Nos vamos a centrar en dos estructuras desde las que con frecuencia vamos a importar datos.

### Importación desde archivo .csv (Comma Separated Values).

Una de las más sencillas si el archivo .csv está bien construido.
Un archivo .csv no es más que un archivo de texto en el que el carácter coma (",") separa campos (variables) y el salgo de línea separa registros (individuos/elementos).

>
En realidad cualquier estructura de texto que utilice un separador de campos (variables) y de registros (líneas) es susceptible de ser importada. R tiene una función muy básica para hacerlo (*read.table*), a la que le indicamos el carácter separador de campos (",", ";","/","/tab"...), si el archivo contiene encabezado (header), una primera línea en la que se almacenan los nombres de las variables, o el carácter que utiliza como separador decimal. En realidad tiene muchos otros argumentos, pero no son necesarios para realizar importaciones sencillas. Por ejemplo, la función que utilizaremos a continuación en realida es una adaptación de esta en la que por defecto se establece que el separador de campos es la coma (","), entre otros argumentos.





Como comentábamos, el .csv es un formato estándar, que pesa poco y hay funciones diseñadas para leer este tipo de archivos.

Entre los archivos de trabajo, hemos incluido un archivo llamado myiam2.
Es un archivo con extensión .csv que contiene una base de datos de pacientes que habían padecido un infarto.

Vamos a crear un dataframe importándola y como sabemos que se trata de un csv, vamos a utilizar al función *read.csv* del paquete *utils*.
En este caso no hace falta cargarla porque este paquete se carga al iniciar R.

Recuerde que hay que indicar el dirección en la que está el archivo.
En este ejemplo, que explicaremos en clase, vamos a utilizar direccionamiento relativo al directorio en el que está el archivo desde mi directorio de trabajo.

> Importante. 
La dirección de las barras de dirección (las que separan directorios y subdirectorios) en R vienen del mundo UNIX (un sistema operativo diferente a Windows), por eso las barras se inclinan hacia el lado contrario. En clase veremos alguna función que facilita copiar y pegar las direcciones desde Windows adaptándolas al lenguaje de R. Se puede hacer invirtiendo las barras que vienen de Windows, o duplicándolas manteniendo la dirección.


```{r,echo=FALSE,include=FALSE}
#Interesante en GlobalOptions/Rmarkdown si está puesto Evaluate chunks in Project en vez de en directory o document, el direccionamiento relativo an un subdirectorio no funciona porque busca en el que está project.  Es curioso que para los paths de las imágenes sí funciona.
# Hay que cambiarlo a current o a documento para que entienda el direccionamiento relativo.
# No, lo que ocurría es que no tenía abierto el proyecto y en ese caso busca en home.


```

```{r importcsv,results='hide'}

iam<-read.csv('_data/myiam2.csv') # Utilizando relative path.

```

La salidas de las funciones read suele ser un dataframe, y por ello podemos asignarlo directamente a un objeto, en el ejemplo el objeto (dataframe) llamado iam.

Pedimos las primeras filas del dataframe.

```{r headiam}
head(iam)
```

También podemos pedir la estructura que nos da mucha información sobre el contenido del dataframe.

```{r striam}
str(iam)
```

En realidad esta estructura también está visible si desplegamos el dataframe en la pestaña Environment, ventana data del panel superior derecho.

![vent_data](pics/iam_en_vent_data.png)

Esta función nos informa del contenido del objeto.
Al tratarse de un dataframe, nos muestra las variables, el tipo de dato que almacena cada una (en este ejemplo solo hay numérico y enteros) y las primeras observaciones.
Es el primer punto de control en el que podemos observar si la importación ha ido como esperábamos.

### Importación desde archivo .xlsx (Excel).

El concepto de importación es el mismo independientemente de la fuente de los datos, pero las funciones a utilizar cambian para responder a las especificidades del tipo de archivo.

R no cuenta con función propia para leer un archivo xlsx, pero otras librerías lo han incorporado.

El siguiente ejemplo crea el mismo dataframe, pero en esta ocasión desde un archivo .xlsx.
Utilizaremos la librería *readxl* (si no la tiene instalada, hágalo antes de ejecutar el siguiente código).

Podríamos cargar la librería con library(readxl), pero vamos a aprovechar para mostrar cómo podemos llamar a una biblioteca (library) sin cargarla en memoria.
La clave es anteceder el nombre de la función con el nombre de la biblioteca seguido de *"::"*.

```{r importxlsx}
iam2<-readxl::read_xlsx('_data/myiam3.xlsx')
```

Pedimos la estructura

```{r striam2}
str(iam2)
```

En realidad vemos que la nueva base de datos no es exactamente la anterior.
Las variables Sex, Smoke y Ami son de tipo carácter.
Además no incluye la edad, pero sí la fecha de ingreso y la fecha de nacimiento.

No es infrecuente que nuestros datos procedan de otro paquete estadístico o tipo de fichero.
La biblioteca *foreign* incluye funciones para acometer esta tarea desde varias fuentes, incluyendo los tres software de análisis más habituales en nuestro contexto (SAS,SPSS,Stata).

+---------------+----------------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    \          |    \           |    \           |    \                                                                                                                                                                                         |
| **Programa**\ | **Paquete**    | **Función**    | **Argumentos y opciones más   frecuentes/predefinidas**                                                                                                                                      |
|    \          |                |                |                                                                                                                                                                                              |
|               |                |                |                                                                                                                                                                                              |
+:==============+:===============+:===============+:=============================================================================================================================================================================================+
|    \          |    \           |    \           |    \                                                                                                                                                                                         |
| SPSS          | foreign        | read.spss()    | read.spss(file,   use.value.labels = TRUE,   to.data.frame = FALSE, max.value.labels = Inf, trim.factor.names = FALSE,   trim_values = TRUE, reencode = NA, use.missings = to.data.frame)    |
+---------------+----------------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    \          |    \           |    \           |    \                                                                                                                                                                                         |
| Stata         | foreign        | read.dta()     | read.dta(file, convert.dates = TRUE,   convert.factors = TRUE, missing.type = FALSE, convert.underscore = FALSE,   warn.missing.labels = TRUE)                                               |
+---------------+----------------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    \          |    \           |    \           |    \                                                                                                                                                                                         |
| SAS           | haven          | read_sas()     | read_sas(data_file,   catalog_file = NULL, encoding = NULL, cols_only = NULL)                                                                                                                |
+---------------+----------------+----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

También existen paquetes más específicos para importar desde alguno de ellos, como *readstata13*, que permiten opciones adicionales.

## Guardar los datos para la siguiente sesión.

Una vez hemos trabajado los datos en R, no tendría mucho sentido volver a exportarlos con las nuevas variables creadas, salvo que deseemos enviárselo a alguien que no utilice R o no pueda importar su formato de datos.

Podríamos guardar toda la imagen del espacio de trabajo (Workspace) y cargarla antes de trabajar con el nuevo dataframe en la siguiente sesión.

Sin embargo, y aunque cueste entenderlo al principio, es preferible guadar la menor cantidad de objetos posibles y tratar de que sea el código el que lo construya cada vez.

Si el objeto es muy grande o lleva mucho tiempo volver a generarlo con código, puede estar justificado guardar el o los objetos concretos.

En el caso del dataframe tenemos una estructura de datos que le sirve a R para gestionar esta parte.
Son los archivos .RDS.

En este vínculo explican las dos opciones, pero de momento prefiero utilizar un archivo .RDS.
Solo necesita un par de argumentos, el nombre del objeto dataframe que queremos guardar y el nombre del archivo en el que queremos guardarlo.

El dataframe que nos interesa es iam, porque contiene las nuevas variables y las transformaciones que hemos realizado.
Incluyo los nombres de los argumentos, pero dado que son los dos primeros en realidad no haría falta[^1].

[^1]: Recordad lo que comenté en la sesión anterior sobre las *posiciones relevantes* al llamar a las funciones

```{r}
saveRDS(object=iam,file='iam.RDS')
```

Es importante que aprendáis a salvarlo (ahora y tras el capítulo de manipulación de datos), porque lo utilizaremos en futuras sesiones. 



